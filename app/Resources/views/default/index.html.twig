{% extends 'base.html.twig' %}

{% block stylesheets %}
    <style>
        .blockquote {
            font-size: 13.5px;
        }

        #app {
            position: absolute;
            top: 10%;
            bottom: 10%;
            left: 75%;
            right: 5%;
            background: white;

            padding: 15px 20px;
            margin: 60px 5px 0 3px;
            border-radius: 5px;
            -webkit-box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.75);
            -moz-box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.75);
            box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.75);
        }

        .modal {
            position: absolute;
            top: 10%;
            bottom: 10%;
            left: 5%;
            right: 75%;
            background: white;
            padding: 15px 20px;
            margin: 60px 5px 0 3px;
            border-radius: 5px;
            -webkit-box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.75);
            -moz-box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.75);
            box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.75);
        }

        .modal input {
            width: 100%;
            padding: 10px;
            border-radius: 0;
            border: 1px solid black;
            margin: 10px 0;
        }

        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        #map {
            height: 100%;
        }

        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
        }

        #pac-input:focus {
            border-color: #4d90fe;
        }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

        #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

        #target {
            width: 345px;
        }
    </style>
{% endblock %}

{% block body %}

    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <div id="app">
        <div style="height: 200px; overflow: hidden;">
            <img v-bind:src="place.images[0]" style="width: 100%;">
        </div>

        <h3>Address: ${ place.address }</h3>
        <h4>${ place.user.lastname } ${ place.user.firstname }: ${ place.user.phone } </h4>
        <span>
            ${ place.description }
        </span>
        <div>
            <blockquote v-for="review in place.reviews" class="blockquote">
                <p class="mb-0">${ review.content }</p>
                <footer class="blockquote-footer"><cite title="Source Title">${ review.user }</cite></footer>
            </blockquote>
        </div>
    </div>
    <div id="add" class="modal">
        <form onsubmit="return false">
            <div style="margin: 60% 0;">
                <h2>New Place</h2>
                <input name="description" placeholder="description" type="text">
                <input name="address" placeholder="address" type="text">
                <input type="submit" onclick="$('#add').hide()">
            </div>
        </form>
    </div>
    <div class="modal" style="top:5px;left:5%;right: 5%;height: 75px; display: block;">
        <img src="{{ asset('img/LOGO_main.png') }}" style="float:left; height: 100%">
        <p style="    font-size: 2em;
    float: left;
    margin: 6px 30px;">Place to sleep tonight</p>
        <div style="float:right; padding: 10px;font-size: 1.4em; cursor: pointer;">
            Registration
        </div>
        <div style="float:right;font-size: 1.2em; cursor: pointer;">
            <input type="text" placeholder="E-mail" style="float: left; width: 200px;    margin: 2px 7px;">
            <input type="text" placeholder="Password" style="float: left;width: 200px;    margin: 2px 7px;">
            <div style="float:right; padding: 10px;font-size: 1.2em; cursor: pointer;">
                Sign In
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}

    <script>
        var app = new Vue({
            delimiters: ['${', '}'],
            el: '#app',
            data: {
                places: [],
                map: '',
                place: [],
                marker: ''
            },
            created: function () {
                this.getPlaces();
            },
            ready: function () {
                this.createPlace();
            },
            methods: {
                getPlaces: function () {
                    this.$http.get('http://vpisali.com/app_dev.php/places/Cherkasy').then(function (resp) {
                        this.places = resp.data.places;
                        var dm = this;
                        this.places.forEach(function (item) {
                            var myLatlng = new google.maps.LatLng(item.latitude, item.longitude);
                            var marker = new google.maps.Marker({
                                position: myLatlng,
                                title: item.address
                            });

                            marker.addListener('click', function () {
                                dm.$http.get('http://vpisali.com/app_dev.php/place/' + item.id).then(function (resp) {
                                    this.place = resp.data.place;
                                })
                            });
// To add the marker to the map, call setMap();
                            marker.setMap(this.map);

                        });
                    });
                }
            },
            createPlace: function () {
                alert('wqdqwdq');
                var place = {
                    "description": $('input[name=description]').value,
                    "address": $('input[name=address]').value,
                };
                this.$http.post('http://vpisali.com/app_dev.php/place', JSON.stringify(place)).then(function (resp) {
                    console.log(resp);
                })
            }
        });

        function initAutocomplete() {
            var dat = this;
            this.map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 49.443585, lng: 32.066290},
                zoom: 12,
                mapTypeId: 'roadmap'
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            map.addListener('click', function (event) {
                var myLatlng = new google.maps.LatLng(event.latLng.lat(), event.latLng.lng());
                if (dat.marker) {
                    dat.marker.setMap(null);
                }
                dat.marker = new google.maps.Marker({
                    position: myLatlng
                });


// To add the marker to the map, call setMap();
                dat.marker.setMap(map);
                $('#add').show();
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }
    </script>
{% endblock %}